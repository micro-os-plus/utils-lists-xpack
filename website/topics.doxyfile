/*
 * This file is part of the µOS++ distribution.
 *   (https://github.com/micro-os-plus/)
 * Copyright (c) 2021 Liviu Ionescu.
 *
 * Permission to use, copy, modify, and/or distribute this software
 * for any purpose is hereby granted, under the terms of the MIT license.
 *
 * If a copy of the license was not distributed with this file, it can
 * be obtained from <https://opensource.org/licenses/MIT/>.
 */

// Not really a .doxyfile, since it does not define variables.
// But also it cannot be .md, since Doxygen renders markdown files
// as extra entries in the sidebar. Suggestions welcomed!

-------------------------------------------------------------------------------
/**

@defgroup micro-os-plus-utils-lists µOS++ utils-list

*/
-------------------------------------------------------------------------------
/**

@defgroup micro-os-plus-utils-lists-cpp-api C++ API
@ingroup micro-os-plus-utils-lists
@details

The µOS++ **utils-list** implementation uses C++ templates,
and thus the main API is C++.

*/
-------------------------------------------------------------------------------
/**

@defgroup micro-os-plus-utils-lists-c-api C API
@ingroup micro-os-plus-utils-lists
@details

The µOS++ **utils-list** is C++ specific, and there are no C equivalents
for the C++ definitions.

*/
-------------------------------------------------------------------------------

/**

@defgroup micro-os-plus-utils-lists-intrusive-lists Intrusive double linked lists
@ingroup micro-os-plus-utils-lists-cpp-api
@details

Intrusive lists are double linked lists that keep the two pointers inside
each linked object.

The intrusive lists can be defined by instantiating the
`micro_os_plus::utils::intrusive_list` class template.

@par Example

```cpp
#include <micro-os-plus/utils/lists.h>

namespace os = micro_os_plus;

class child
{
public:
  child (const char* name);
  // ...
protected:
  const char* name_;

public:
  // Intrusive node used to link this child to the registry list.
  // Must be public.
  os::utils::double_list_links registry_links_;
};

using static_children_list = os::utils::intrusive_list<
        child, // type of nodes in the list
        decltype (child::registry_links_), // type of the `registry_links_` member
        &child::registry_links_, // name of member
        static_double_list_links>; // type of the head links node

// The list head is statically allocated.
static_children_list kids_registry;
```

*/
-------------------------------------------------------------------------------

/**

@defgroup micro-os-plus-utils-lists-double-lists Double linked lists
@ingroup micro-os-plus-utils-lists-cpp-api
@details

For simpler use cases, like traditional list or low intrusive lists,
there are several simpler classes and templates.

*/
-------------------------------------------------------------------------------
